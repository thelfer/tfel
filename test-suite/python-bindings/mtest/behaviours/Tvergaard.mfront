@DSL DefaultCZMDSL;
@Behaviour Tvergaard;
@Author Helfer Thomas;
@Date 23/07/2013;
@Description{
  "A modified version of the Tvergaard model."
  "Tvergaard V., Effet of fibre debonding in a whisker reinforced metal,"
  "Mater. Sci. Eng., 1990, vol. a125, pp 203-213"
}

@ModellingHypothesis Tridimensional;
@ProvidesSymmetricTangentOperator;

@MaterialProperty real kn;
kn.setGlossaryName("NormalStiffness");
@MaterialProperty real ks;
ks.setGlossaryName("TangentialStiffness");

@MaterialProperty stress smax;
smax.setGlossaryName("UltimateTensileStrength");
@MaterialProperty real delta;
delta.setEntryName("MaximumOpeningDisplacement");

@StateVariable real d;
d.setGlossaryName("Damage");
@StateVariable real di;
di.setEntryName("DamageIndicator");

@PredictionOperator{
  const real C        = real(27)/real(4);
  // initial stiffness
  const real K1 = C*smax/delta;
  Dt_tn = Dt_nt = tvector<N-1,real>(real(0));
  Dt_tt = ks*tmatrix<N-1,N-1,real>::Id();
  if((smt==ELASTIC)||(smt==SECANTOPERATOR)||(smt==TANGENTOPERATOR)){
    if(u_n<0){
      Dt_nn = kn;
    } else {
      if(smt==ELASTIC){
	Dt_nn= K1;
      } else if(smt==SECANTOPERATOR){
	Dt_nn = K1*(1-d)*(1-d);
      } else {
	// tangent operator
	if((di>0.5)&&(d<=0.99)){
	  Dt_nn = K1*(1-d)*(1-3*d);
	} else {
	  Dt_nn = K1*(1-d)*(1-d);
	}
      }
    }
  } else {
    // unsupported case
    return FAILURE;
  }
}

@Integrator{
  const real C        = real(27)/real(4);
  // tagential behaviour
  t_t = ks*(u_t+du_t);
  if(computeTangentOperator_){
    Dt_tt = ks*tmatrix<N-1,N-1,real>::Id();
    Dt_tn = Dt_nt = tvector<N-1,real>(real(0));
  }
  // normal behaviour
  if(u_n+du_n<0){
    // compression
    t_n = kn*(u_n+du_n);
    if(computeTangentOperator_){
      Dt_nn = kn;
    }
  } else {
    // traction
    // reduced opening displacement
    const real rod = (u_n+du_n)/delta;
    // previous damage
    const real d_1 = d;
    d   = min(max(d,rod),0.99);
    // damage indicator
    di  = ((d_1>d)&&(du_n>0)) ? 1. : 0.;
    // initial stiffness
    const real K1 = C*smax/delta;
    // secant stiffness
    const real K  = K1*(1-d)*(1-d);
    t_n = K*(u_n+du_n);
    if(computeTangentOperator_){
      if(smt==ELASTIC){
	Dt_nn = K1;
      } else if(smt==SECANTOPERATOR){
	Dt_nn = K;
      } else if(smt==CONSISTENTTANGENTOPERATOR){
	if(d<=0.99){
	  Dt_nn = K1*(1-d)*(1-3*d);
	} else {
	  Dt_nn = K;
	}
      }
    }
  }
} // end of @Integrator
