@DSL Implicit;
@Behaviour SingleCrystal_DD_FCC;
@Author    Thomas Helfer/Jean-Michel Proix;
@Date      10/10/2017;
@Description{
  "On implante ici la loi MONO_DD_CFC d√©crite dans la documentation du"
  "code Aster R5.03.11."
}
@Theta   1.0;
@Epsilon 1.e-10 ;
@IterMax 100 ;

@ModellingHypothesis Tridimensional;
@OrthotropicBehaviour;
@RequireStiffnessTensor;
@Brick StandardElasticity;

@CrystalStructure FCC;
@SlidingSystem <0,1,-1>{1,1,1};

// h0: (0,0) => (1,1)   h1 1
// h1: (0,1) => (1,0)   h2 1
// h2: (0,3) => (1,11)  h3 0.6
// h3: (0,4) => (1,10)  h6 1.8
// h4: (0,5) => (1,9)   h5 1.6
// h5: (0,6) => (1,6)   h4 12.3
// h6: (0,7) => (1,8)   h5 1.6 
@InteractionMatrix {0.124,0.124,0.07,0.122,0.137,0.625,0.137};

@MaterialProperty real tauf;
@MaterialProperty real y;
@MaterialProperty real pn;
@MaterialProperty real gamma0;
@MaterialProperty real a;
@MaterialProperty real b;
@MaterialProperty real rhoref;
@MaterialProperty real alpha;
@MaterialProperty real beta;
@MaterialProperty real Mu;

@StateVariable strain  omega[Nss];

@AuxiliaryStateVariable real g[Nss];
@AuxiliaryStateVariable real p[Nss];
@AuxiliaryStateVariable real tau[Nss];

@LocalVariable real    Dp[Nss];
@LocalVariable real    Dg[Nss];
@LocalVariable real    hs[Nss];
@LocalVariable real    taufor[Nss];
@LocalVariable real    taufor2[Nss];
@LocalVariable real    hforest[Nss];
@LocalVariable real    htot[Nss];
@LocalVariable real    hcopla[Nss];
@LocalVariable real    sgn[Nss];
@LocalVariable real    terme[Nss];

@Integrator{
  const auto& ss = SingleCrystal_DD_FCCSlipSystems<real>::getSlidingSystems();
  StrainStensor Depsp(real(0));
  real ppomega[Nss];
  real C=1.0;
  real sum=0.0;
  for(unsigned short k=0;k!=Nss;++k){
    ppomega[k]=max(0.,omega[k]+theta*domega[k]);
    sum+=ppomega[k];
  }
  if (alpha>0.){
    C=0.2+0.8*log(alpha*sqrt(sum))/log(alpha*beta*sqrt(rhoref));
  }
  const real dCdomega = 0.4/log(alpha*beta*sqrt(rhoref))/sum ;  
  for(unsigned short i=0;i!=Nss;++i){

    taufor2[i]=0.0;
    // ecrouissage Tau_forest
    for(unsigned short j=0;j!=Nss;++j){
      taufor2[i] +=ss.mh(i,j)*ppomega[j];
    }
    taufor[i]=Mu*C*sqrt(taufor2[i]);
    
    // calcul du terme Hs
    hs[i]=0.;
    hforest[i]=0.0;
    htot[i]=0.0;
    hcopla[i]=0.0;
    for(unsigned short j=0;j!=Nss;++j){
      if (ss.areCoplanar(i,j)){
	hcopla[i]+=sqrt(ss.mh(i,j)*ppomega[j]);
      } else {
	hforest[i]+=sqrt(ss.mh(i,j))*ppomega[j];
      }
      htot[i]+=sqrt(ss.mh(i,j)*ppomega[j]);
    }
    hs[i]=a*hforest[i]/htot[i]+b*C*hcopla[i]-y/beta*ppomega[i];    
      
    // cission resolue
    tau[i] = ss.mus[i] | sig ;
    terme[i]=abs(tau[i])/(tauf+taufor[i]);
    sgn[i]=0.;
    if (abs(tau[i]) > 0.) {
      sgn[i]=tau[i]/abs(tau[i]);
    }

    // ecoulement plastique
    if (terme[i]>=1.){
      Dp[i]  = dt*gamma0*pow(terme[i],pn)-dt*gamma0;
      Dg[i]  = sgn[i]*Dp[i];
      Depsp+=Dg[i]*ss.mus[i] ;
      // termes de la jacobienne
      real dpdtau = pn * (Dp[i] + dt*gamma0)/tau[i] ;
      dfeel_ddeel  += dpdtau* sgn[i] *( (ss.mus[i]) ^ (ss.mus[i]) ) *D *theta;     
      dfomega_ddeel(i)  =  -dpdtau*hs[i]*D*ss.mus[i]*theta ;
        
    } else {
      Dp[i]=0.;
      Dg[i]=0.;
    }
    fomega[i] = domega[i]-Dp[i]*hs[i];
  }
  feel += Depsp;
  
  // autres termes de la jacobienne

  for(unsigned short i=0;i!=Nss;++i){
    for(unsigned short j=0;j!=Nss;++j){
      real dpjdomegai   =0.;
      real dtaujdomegai = dCdomega*taufor[j]/C+ 0.5*Mu*C*Mu*C*ss.mh(j,i)/taufor[j] ;
      if (terme[j]>=1.){
	dpjdomegai   = -pn *(Dp[j]+dt*gamma0)/(tauf+taufor[j])*dtaujdomegai ;
      }
      dfeel_ddomega(i) +=  dpjdomegai * sgn[j]* ( ss.mus[j] )  ;
    }
    for(unsigned short j=0;j!=Nss;++j){
      real dpidomegaj   = 0.;
      real dtauidomegaj = 0. ;            
      if (terme[i]>= 1.) {
	dtauidomegaj = 0.5*Mu*Mu*C/taufor[i]*( 2.*dCdomega*taufor2[i]+C*ss.mh(i,j)) ;
	dpidomegaj = -pn *(Dp[i]+dt*gamma0)/(tauf+taufor[i])*dtauidomegaj ;
      }
      real Iforest = 0.;
      real Icopla = 0. ;
      // forest
      if (ss.areCoplanar(i,j)){
	Icopla=1. ;
      } else {
	Iforest=1. ;
      }
      real dT1domegaj = sqrt(ss.mh(i,j))/htot[i]*( Iforest-0.5*hforest[i]/htot[i]/sqrt(ppomega[j]) ) ;
      real dT2domegaj = dCdomega*hcopla[i]+ C * ss.mh(i,j) * Icopla / 2. / sqrt(ss.mh(i,j)*ppomega[j]) ;
      real dhidpj = a * dT1domegaj + b * dT2domegaj ;
      dfomega_ddomega(i,j) += -Dp[i]*dhidpj - hs[i]* dpidomegaj  ;
      if (j==i) {
	dfomega_ddomega(i,j) += Dp[i]*y/beta ;
      }
    }
  }
} 

@UpdateAuxiliaryStateVars{
  for(unsigned short k=0;k!=Nss;++k){
    p[k]+=Dp[k];
    g[k]+=Dg[k];
  }
}
