/*!
 * \file mfront/tests/behaviours/castem/UMATExternalBehaviourDescription.cxx.in
 * \brief
 * \author Helfer Thomas
 * \date   15 June 2015
 * \copyright Copyright (C) 2006-2014 CEA/DEN, EDF R&D. All rights
 * reserved.
 * This project is publicly released under either the GNU GPL Licence
 * or the CECILL-A licence. A copy of thoses licences are delivered
 * with the sources of TFEL. CEA or EDF may also distribute this
 * project under specific licensing conditions.
 */

#ifdef NDEBUG
#undef NDEBUG
#endif /* NDEBUG */

// a small trick so that the compiler refers to the original file for
// error reports
#line 21 "@abs_top_srcdir@/mfront/tests/behaviours/castem/UMATExternalBehaviourDescription.cxx.in"

#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <stdexcept>

#include "TFEL/Tests/TestCase.hxx"
#include "TFEL/Tests/TestProxy.hxx"
#include "TFEL/Tests/TestManager.hxx"
#include "TFEL/Glossary/Glossary.hxx"
#include "TFEL/Glossary/GlossaryEntry.hxx"
#include "TFEL/System/ExternalLibraryManager.hxx"
#include "TFEL/System/ExternalBehaviourDescription.hxx"

// fixing a bug on current glibc++ cygwin versions (19/08/2015)
#if defined __CYGWIN__ && (!defined _GLIBCXX_USE_C99)
#include <sstream>
namespace std {
  template <typename T>
  std::string to_string(const T& v) {
    std::ostringstream s;
    s << v;
    return s.str();
  }
}  // namespace std
#endif /* defined __CYGWIN__ &&  (!defined _GLIBCXX_USE_C99) */

struct UMATBehaviourDescriptionTest final : public tfel::tests::TestCase {
  UMATBehaviourDescriptionTest()
    : tfel::tests::TestCase("TFEL/System", "UMATBehaviourDescriptionTest"),
      library([]{const auto e = ::getenv("MFrontCastemBehavioursBuildPath");
	  return e == nullptr ? std::string{} : e;}()) {
  }  // end of UMATBehaviourDescriptionTest

  tfel::tests::TestResult execute() override {
    this->test1();
    this->test2();
    this->test3();
    this->test4();
    this->test5();
    return this->result;
  }

 private:
  using ExternalBehaviourDescription =
      tfel::system::ExternalBehaviourDescription;
  /*!
   * \brief test of the standard norton behaviour in PlaneStrain
   */
  void test1() {
    using namespace tfel::glossary;
    const auto b = ExternalBehaviourDescription{
        this->library, "umatnorton", "PlaneStrain"};
    // should small strain behaviour
    TFEL_TESTS_ASSERT(b.tfel_version == "@TFEL_VERSION@");
    // should small strain behaviour
    TFEL_TESTS_ASSERT(b.btype == 1u);
    // behaviour shall be isotropic
    TFEL_TESTS_ASSERT(b.stype == 0u);
    // elastic behaviour shall be isotropic
    TFEL_TESTS_ASSERT(b.etype == 0u);
    // material properties
    TFEL_TESTS_ASSERT(b.mpnames.size() == 2u);
    for (const auto& m : {"NortonCoefficient", "NortonExponent"}) {
      TFEL_TESTS_ASSERT(std::find(b.mpnames.begin(), b.mpnames.end(), m) !=
                        b.mpnames.end());
    }
    // state variables
    TFEL_TESTS_ASSERT(b.ivnames.size() == 2u);
    TFEL_TESTS_ASSERT(b.ivnames[0] == Glossary::ElasticStrain);
    TFEL_TESTS_ASSERT(b.ivnames[1] == Glossary::EquivalentViscoplasticStrain);
  }
  /*!
   * \brief test of failure to build an ExternalBehaviourDescription
   * for unknown behaviour or unsupported modelling hypothesis
   */
  void test2() {
    using namespace std;
    {
      bool ok = false;
      try {
        const auto b = ExternalBehaviourDescription{
            this->library, "unknown", "PlaneStrain"};
      } catch (runtime_error&) {
        ok = true;
      }
      this->registerResult("check throw on undefined behaviour", ok);
    }
    {
      bool ok = false;
      try {
        const auto b = ExternalBehaviourDescription{
            this->library, "umatnorton", "PlaneStress"};
      } catch (runtime_error&) {
        ok = true;
      }
      this->registerResult("check throw on unsupported hypothesis", ok);
    }
  }
  /*!
   * \brief test of the log1D strategy
   */
  void test3() {
    using namespace std;
    using namespace tfel::glossary;
    const auto b = ExternalBehaviourDescription{
        this->library, "umatnorton_log1d",
        "AxisymmetricalGeneralisedPlaneStrain"};
    // should finite strain behaviour
    TFEL_TESTS_ASSERT(b.btype == 2u);
    // should have ETO/PK1 kinematic
    TFEL_TESTS_ASSERT(b.kinematic == 4u);
    // behaviour shall be isotropic
    TFEL_TESTS_ASSERT(b.stype == 0u);
    // elastic behaviour shall be isotropic
    TFEL_TESTS_ASSERT(b.etype == 0u);
    // material properties
    TFEL_TESTS_ASSERT(b.mpnames.size() == 2u);
    for (const auto& m : {"NortonCoefficient", "NortonExponent"}) {
      TFEL_TESTS_ASSERT(find(b.mpnames.begin(), b.mpnames.end(), m) !=
                        b.mpnames.end());
    }
    // state variables
    TFEL_TESTS_ASSERT(b.ivnames.size() == 2u);
    TFEL_TESTS_ASSERT(b.ivtypes.size() == 2u);
    TFEL_TESTS_ASSERT(b.ivnames[0] == Glossary::ElasticStrain);
    TFEL_TESTS_ASSERT(b.ivtypes[0] == 1u);
    TFEL_TESTS_ASSERT(b.ivnames[1] == Glossary::EquivalentViscoplasticStrain);
    TFEL_TESTS_ASSERT(b.ivtypes[1] == 0u);
    // external state variables
    TFEL_TESTS_ASSERT(b.evnames.empty());
    // additional attributes
    TFEL_TESTS_ASSERT(!b.requiresStiffnessTensor);
    TFEL_TESTS_ASSERT(!b.requiresThermalExpansionCoefficientTensor);
  }
  /*!
   * orthotropic finite strain behaviour with arrays of internal state variables
   */
  void test4() {
    using namespace std;
    using namespace tfel::glossary;
    const auto b = ExternalBehaviourDescription{
        this->library, "umatfinitestrainsinglecrystal",
        "Tridimensional"};
    // should finite strain behaviour
    TFEL_TESTS_ASSERT(b.btype == 2u);
    // should have standard kinematic
    TFEL_TESTS_ASSERT(b.kinematic == 3u);
    // behaviour shall be orthotropic
    TFEL_TESTS_ASSERT(b.stype == 1u);
    // elastic behaviour shall be orthotropic
    TFEL_TESTS_ASSERT(b.etype == 1u);
    // material properties
    TFEL_TESTS_ASSERT(b.mpnames.size() == 7u);
    for (const auto& m : {"m", "K", "C", "R0", "Q", "b", "d1"}) {
      TFEL_TESTS_ASSERT(find(b.mpnames.begin(), b.mpnames.end(), m) !=
                        b.mpnames.end());
    }
    //    state variables
    TFEL_TESTS_ASSERT(b.ivnames.size() == 37u);
    TFEL_TESTS_ASSERT(b.ivtypes.size() == 37u);
    for (unsigned int i = 0; i != 12; ++i) {
      const auto s = to_string(i);
      TFEL_TESTS_ASSERT(b.ivnames[i] == "g[" + s + "]");
      TFEL_TESTS_ASSERT(b.ivtypes[i] == 0u);
      TFEL_TESTS_ASSERT(b.ivnames[13 + i] == "p[" + s + "]");
      TFEL_TESTS_ASSERT(b.ivtypes[13 + i] == 0u);
      TFEL_TESTS_ASSERT(b.ivnames[25 + i] == "a[" + s + "]");
      TFEL_TESTS_ASSERT(b.ivtypes[25 + i] == 0u);
    }
    TFEL_TESTS_ASSERT(b.ivnames[12] == "Fe");
    TFEL_TESTS_ASSERT(b.ivtypes[12] == 3u);
    // external state variables
    TFEL_TESTS_ASSERT(b.evnames.empty());
    // additional attributes
    TFEL_TESTS_ASSERT(b.requiresStiffnessTensor);
    TFEL_TESTS_ASSERT(!b.requiresThermalExpansionCoefficientTensor);
  }
  void test5() {
    using namespace tfel::system;
    auto& elm = ExternalLibraryManager::getExternalLibraryManager();
    const auto l = this->library;
    const auto f = "umatnorton_log1d";
    const auto mh = elm.getSupportedModellingHypotheses(l, f);
    TFEL_TESTS_ASSERT(mh.size() == 1u);
    TFEL_TESTS_ASSERT(mh.at(0) == "AxisymmetricalGeneralisedPlaneStrain");
  }
private:
  const std::string library;
};

TFEL_TESTS_GENERATE_PROXY(UMATBehaviourDescriptionTest,
                          "UMATBehaviourDescriptionTest");

int main() {
  auto& m = tfel::tests::TestManager::getTestManager();
  m.addTestOutput(std::cout);
  m.addXMLTestOutput("UMATBehaviourDescription.xml");
  return m.execute().success() ? EXIT_SUCCESS : EXIT_FAILURE;
}
